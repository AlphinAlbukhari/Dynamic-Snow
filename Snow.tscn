[gd_scene load_steps=36 format=2]

[ext_resource path="res://Snow.gd" type="Script" id=1]
[ext_resource path="res://circle gradient.png" type="Texture" id=2]

[sub_resource type="ViewportTexture" id=1]
viewport_path = NodePath("Viewport")

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
uniform_name = "texture"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 0, 0, 0 ) ]
operator = 2

[sub_resource type="OpenSimplexNoise" id=4]
period = 42.5
persistence = 0.542

[sub_resource type="NoiseTexture" id=5]
noise = SubResource( 4 )

[sub_resource type="VisualShaderNodeTexture" id=6]
texture = SubResource( 5 )

[sub_resource type="Gradient" id=7]
offsets = PoolRealArray( 0, 0.666667 )
colors = PoolColorArray( 0.398438, 0.398438, 0.398438, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=8]
gradient = SubResource( 7 )

[sub_resource type="VisualShaderNodeTexture" id=9]
texture = SubResource( 8 )

[sub_resource type="VisualShaderNodeVectorOp" id=10]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="Gradient" id=11]
colors = PoolColorArray( 0.253906, 0.253906, 0.253906, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=12]
gradient = SubResource( 11 )

[sub_resource type="VisualShaderNodeTexture" id=13]
texture = SubResource( 12 )

[sub_resource type="VisualShaderNodeTextureUniform" id=14]
uniform_name = "heightmap"

[sub_resource type="VisualShaderNodeVectorOp" id=15]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 1, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=16]

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "vertex"

[sub_resource type="VisualShader" id=18]
code = "shader_type spatial;
uniform sampler2D heightmap;
uniform sampler2D texture;
uniform sampler2D tex_frg_7;
uniform sampler2D tex_frg_4;
uniform sampler2D tex_frg_5;



void vertex() {
// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(heightmap, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorOp:3
	vec3 n_in3p1 = vec3(0.00000, 1.00000, 0.00000);
	vec3 n_out3p0 = n_out2p0 * n_in3p1;

// Input:5
	vec3 n_out5p0 = VERTEX;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 + n_out5p0;

// Output:0
	VERTEX = n_out4p0;

}

void fragment() {
// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(texture, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorOp:6
	vec3 n_in6p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out6p0 = n_out2p0 * n_in6p1;

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out6p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, n_out4p0.xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// VectorOp:3
	vec3 n_out3p0 = n_out7p0 * n_out5p0;

// Output:0
	ALBEDO = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -276.557, 43 )
nodes/vertex/0/position = Vector2( 680, 80 )
nodes/vertex/2/node = SubResource( 14 )
nodes/vertex/2/position = Vector2( 80, 80 )
nodes/vertex/3/node = SubResource( 15 )
nodes/vertex/3/position = Vector2( 300, 100 )
nodes/vertex/4/node = SubResource( 16 )
nodes/vertex/4/position = Vector2( 480, 140 )
nodes/vertex/5/node = SubResource( 17 )
nodes/vertex/5/position = Vector2( 320, 240 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 0, 5, 0, 4, 1, 4, 0, 0, 0 )
nodes/fragment/0/position = Vector2( 560, 180 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -340, 20 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( 313.313, 207.029 )
nodes/fragment/4/node = SubResource( 6 )
nodes/fragment/4/position = Vector2( -140, 280 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( 100, 320 )
nodes/fragment/6/node = SubResource( 10 )
nodes/fragment/6/position = Vector2( -80, 140 )
nodes/fragment/7/node = SubResource( 13 )
nodes/fragment/7/position = Vector2( 100, 80 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 0, 4, 0, 5, 0, 5, 0, 3, 1, 2, 0, 6, 0, 6, 0, 7, 0, 7, 0, 3, 0 )

[sub_resource type="ViewportTexture" id=19]
viewport_path = NodePath("Viewport")

[sub_resource type="ViewportTexture" id=20]
viewport_path = NodePath("Viewport")

[sub_resource type="ShaderMaterial" id=21]
resource_local_to_scene = true
shader = SubResource( 18 )
shader_param/heightmap = SubResource( 19 )
shader_param/texture = SubResource( 20 )

[sub_resource type="PlaneMesh" id=22]
subdivide_width = 64
subdivide_depth = 64

[sub_resource type="SphereMesh" id=23]

[sub_resource type="OpenSimplexNoise" id=24]

[sub_resource type="NoiseTexture" id=25]
seamless = true
noise = SubResource( 24 )

[sub_resource type="VisualShaderNodeTexture" id=26]
output_port_for_preview = 0
texture = SubResource( 25 )

[sub_resource type="Gradient" id=27]
offsets = PoolRealArray( 0.125786, 0.616352 )
colors = PoolColorArray( 0.414063, 0.412445, 0.412445, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=28]
gradient = SubResource( 27 )

[sub_resource type="VisualShaderNodeTexture" id=29]
output_port_for_preview = 0
texture = SubResource( 28 )

[sub_resource type="VisualShaderNodeVectorOp" id=30]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=31]
constant = 2.0

[sub_resource type="VisualShader" id=32]
code = "shader_type spatial;
uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out2p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Scalar:5
	float n_out5p0 = 2.000000;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 * vec3(n_out5p0);

// Output:0
	ALBEDO = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 183.93, 0 )
nodes/fragment/0/position = Vector2( 880, 60 )
nodes/fragment/2/node = SubResource( 26 )
nodes/fragment/2/position = Vector2( 0, 80 )
nodes/fragment/3/node = SubResource( 29 )
nodes/fragment/3/position = Vector2( 240, 80 )
nodes/fragment/4/node = SubResource( 30 )
nodes/fragment/4/position = Vector2( 660, 100 )
nodes/fragment/5/node = SubResource( 31 )
nodes/fragment/5/position = Vector2( 440, 220 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 0, 5, 0, 4, 1, 4, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=33]
shader = SubResource( 32 )

[node name="Snow" type="Spatial"]
script = ExtResource( 1 )

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 500, 500 )
render_target_v_flip = true
render_target_clear_mode = 2

[node name="Sprite" type="Sprite" parent="Viewport"]
visible = false
modulate = Color( 0, 0, 0, 1 )
scale = Vector2( 1.08, 1.08 )
texture = ExtResource( 2 )

[node name="Sprite" type="Sprite" parent="."]
scale = Vector2( 0.396103, 0.396103 )
texture = SubResource( 1 )
centered = false

[node name="snow" type="MeshInstance" parent="."]
transform = Transform( 10, 0, 0, 0, 1, 0, 0, 0, 10, 10, 0, 10 )
material_override = SubResource( 21 )
mesh = SubResource( 22 )
material/0 = null

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.907132, 0.420846, 0, -0.420846, 0.907132, 11.033, 9.00347, 26.6986 )

[node name="ball" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.08, 1, 0 )
mesh = SubResource( 23 )
material/0 = SubResource( 33 )
